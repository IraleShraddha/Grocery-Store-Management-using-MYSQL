create database grocery;
use grocery;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select * from order_details;
select * from supplier;
select * from categories;
select * from employees;
select * from customers;
select * from orders;
select * from products;

----------- Analysis Questions
-- 1. Customer Insights
-- ● How many unique customers have placed orders?

select count(distinct cust_id) as 'unique customers' 
from orders;

-- ●	Which customers have placed the highest number of orders?


select o.ord_id,c.cust_id,c.cust_name ,count(o.ord_id) total_orders 
from orders o join customers c on c.cust_id=o.cust_id
group by c.cust_id,o.ord_id 
order by count(o.ord_id) desc; 



-- ●	What is the total and average purchase value per customer?

select sum(od.total_price) as total_price, avg(od.total_price) as
 avg_price,o.cust_id as customers from
 order_details od join orders o on od.ord_id=o.ord_id group by o.cust_id;

-- ●	Who are the top 5 customers by total purchase amount?


select max(total_price), o.cust_id 
from order_details  od join orders o on  od.ord_id=o.ord_id 
group by o.cust_id order by max(total_price) desc limit 5;  


-- 2. Product Performance
-- ●	How many products exist in each category?
select count(prod_name) "total no of products",
cat_id from products group by cat_id;

-- ●	What is the average price of products by category?
select avg(price),cat_id from products group by cat_id;

-- ●	Which products have the highest total sales (by quantity)? 
select p.prod_id,p.prod_name,max(total_price) 
from products p join order_details o on p.prod_id=o.prod_id 
group by p.prod_id,p.prod_name;

-- ●	What is the total revenue generated by each product?

select p.prod_id,p.prod_name ,sum(total_price) 
from products p join order_details o on p.prod_id=o.prod_id 
group by p.prod_id,p.prod_name; 

-- ●	How do product sales vary by category and supplier?


-- 3. Sales and Order Trends
-- ●	How many orders have been placed in total?

select count(ord_id) from order_details;
-- ●	What is the average value per order?
SELECT  AVG(order_total) AS average_order_value FROM (SELECT ord_id,
        SUM(total_price) AS order_total
    FROM order_details GROUP BY ord_id ) AS order_totals;



-- ●	On which dates were the most orders placed?
SELECT order_date, COUNT(*) AS total_orders
FROM orders
GROUP BY order_date
ORDER BY total_orders DESC;



-- ●	What are the monthly trends in order volume and revenue?

SELECT DATE_FORMAT(STR_TO_DATE(order_date, '%Y/%m/%d'), '%Y/%m') AS month,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY month
ORDER BY month;


-- ●	How do order patterns vary across weekdays and weekends?

select case when dayofweek(str_to_date(order_date,'%Y/%m/%d')) in(1,7) then "weekend"
							else 'weekdays'
                            end as day_type,
                            count(distinct o.ord_id),
                            sum(od.total_price) from 
                            orders o join order_details as od on o.ord_id=od.ord_id group by day_type;
                            
-- 4. Supplier Contribution
-- ●	How many suppliers are there in the database?

select count(sup_id) from supplier;

-- ●	Which supplier provides the most products?

select count(prod_id) total_products ,sup_id from products group by sup_id;

-- ●	What is the average price of products from each supplier?
select avg(prod_id) as avg_price_of_product,sup_id from products group by sup_id;

-- ●	Which suppliers contribute the most to total product sales (by revenue)?
select sum(od.total_price) as total_price, s.sup_id,s.sup_name from supplier s join products as p on s.sup_id=p.sup_id join order_details od on od.prod_id=p.prod_id group by s.sup_id,total_price;


-- 5. Employee Performance
-- ●	How many employees have processed orders?
select count(emp_id) from orders;

-- ●	Which employees have handled the most orders?
select emp_id ,count(ord_id) from orders group by emp_id order by count(ord_id) desc limit 1;

-- ●	What is the total sales value processed by each employee?
select sum(od.total_price) as "total sales" ,o.emp_id from order_details od join orders o on o.ord_id=od.ord_id group by emp_id order by sum(od.total_price) desc ;

-- ●	What is the average order value handled per employee?
SELECT e.emp_id, e.emp_name, ROUND(SUM(od.total_price) / COUNT(DISTINCT o.ord_id), 2) AS avg_order_value
FROM employees e JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id, e.emp_name;

-- 6. Order Details Deep Dive
-- ●	What is the relationship between quantity ordered and total price?
select (total_price)-(quantity*each_price) as difference,ord_id from order_details;

-- ●	What is the average quantity ordered per product?
select p.prod_name, avg(quantity) as avg_product_quantity_ordered from products p join order_details od on od.prod_id=p.prod_id group by p.prod_name;

-- ●	How does the unit price vary across products and orders?
select *,(price-each_price) as difference from products as p join order_details as od on p.prod_id=od.prod_id;

describe order_details;
describe supplier;
describe categories;
describe employees;
describe customers;
describe orders;
describe products;

